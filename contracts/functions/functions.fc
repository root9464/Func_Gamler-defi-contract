int calculate_table_sequence(cell table) impure inline {
  slice pivot = NULLABLE_ADDRESS;
  int kounter = 0;
  do {
      (pivot, slice value, int found?) = table.helper::slice_dict_get_next?(267, pivot);
      if (found?) {
          kounter += 1;
      }
  } until (~ found?);
  return kounter;
}

cell pack_jetton_wallet_data(int status, int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
  return  
    begin_cell()
      .store_uint(status, 4)
      .store_coins(balance)
      .store_slice(owner_address)
      .store_slice(jetton_master_address)
      .store_ref(jetton_wallet_code)
    .end_cell();
}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
  return 
    begin_cell()
      .store_uint(0, 1 + 1)        
      .store_dict(jetton_wallet_code)  
      .store_dict(                     
        pack_jetton_wallet_data(0, 0, owner_address, jetton_master_address, jetton_wallet_code)
      )
      .store_uint(0, 1)                
    .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
  return 
    begin_cell()
      .store_uint(4, 3)
      .store_int(WORKCHAIN, 8)
      .store_uint(cell_hash(state_init), 256)
    .end_cell().begin_parse();
}

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
  return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}