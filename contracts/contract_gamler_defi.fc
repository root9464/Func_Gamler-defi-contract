#include "imports/stdlib.fc";
#include "includes/constants.fc";
#include "includes/opcodes.fc";
#include "helpers/helpers.fc";
#include "includes/errors.fc";
#include "functions/functions.fc";

global slice this::admin_address;
global slice this::jetton_wallet_address;

global int msg::query_id;


() set_global_state() impure inline {
  set_data(
    begin_cell()
      .store_slice(this::admin_address)
      .store_slice(this::jetton_wallet_address)
    .end_cell()
  );
}

() load_global_state() impure inline {
  slice contract_storage = get_data().begin_parse();
  this::admin_address = contract_storage~load_msg_addr();
  this::jetton_wallet_address = contract_storage~load_msg_addr();
}

() send_simple_jettons(slice to_address, int jettons_amount) impure inline {
  builder message = begin_cell()
    .store_uint(BOUNCEABLE, MSG_TYPE_SIZE)
    .store_slice(this::jetton_wallet_address)
    .store_coins(MAX_COMISSION * 2)
    .store_uint(0, MSG_ONLY_BODY_SIZE)
    .store_uint(operation::jetton::transfer, OPERATION_CODE_SIZE)
    .store_uint(msg::query_id, QUERY_ID_SIZE)
    .store_coins(jettons_amount)
    .store_slice(to_address)
    .store_slice(helper::addr_none())  ;; response_address
    .store_int(0, 1)  ;; empty custom_payload
    .store_coins(0)   ;; forward amount to new_owner_address
    .store_int(0, 1); ;; empty forward_payload
  
  send_raw_message(message.end_cell(), SEND_MODE_PAY_FEES_SEPARATELY);
}

() give_all_tons() impure inline {
  raw_reserve(RESERVE_TON, 0); ;; 0.01 ton

  builder message = begin_cell()
    .store_uint(BOUNCEABLE, MSG_TYPE_SIZE)
    .store_slice(this::admin_address)
    .store_coins(0)
    .store_uint(0, MSG_ONLY_BODY_SIZE);
  
  send_raw_message(message.end_cell(), 128);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  slice sliced_message = in_msg_full.begin_parse();
  int flags = sliced_message~load_uint(4);

  if (flags & 1) {
    return ();
  }

  slice sender_address = sliced_message~load_msg_addr();
  load_global_state();

  int operation_code = in_msg_body~load_uint(32);
  msg::query_id = in_msg_body~load_uint(64);

  if (operation_code == operation::accept_jettons) {
    int transaction_jettons_amount = in_msg_body~load_coins();    
    in_msg_body~load_msg_addr();
    in_msg_body~skip_bits(1);
    slice inner_payload = in_msg_body~load_ref().begin_parse();
    cell addresses_table = inner_payload~load_dict();

    throw_unless(error::addresses_dont_match, equal_slices(this::jetton_wallet_address, sender_address));

    int table_sequence = calculate_table_sequence(addresses_table);
    slice pivot = NULLABLE_ADDRESS;

    do {
      (pivot, slice jetton_data, int success?) = addresses_table.helper::slice_dict_get_next?(267, pivot);
      if (success?) {
        int jettons_amount = jetton_data~load_coins();
        throw_unless(error:not_enough_jettons, transaction_jettons_amount >= jettons_amount);
        send_simple_jettons(pivot, jettons_amount);
        transaction_jettons_amount -= jettons_amount;
      }
    } until (~ success?)
    return ();
  }

  if (operation_code == operation::accept_jettons_from_platform) {
    throw_unless(error::not_an_admin, equal_slices(this::admin_address, sender_address));

    cell addresses_table = in_msg_body~load_dict();
    int table_sequence = calculate_table_sequence(addresses_table);
    slice pivot = NULLABLE_ADDRESS;

    do {
      (pivot, slice jetton_data, int success?) = addresses_table.helper::slice_dict_get_next?(267, pivot);
      if (success?) {
        int jettons_amount = jetton_data~load_coins();
        send_simple_jettons(pivot, jettons_amount);
      }
    } until (~ success?)
    return ();
  }

  if (operation_code == opeartion::withdraw_funds) {
    throw_unless(error::not_an_admin, equal_slices(this::admin_address, sender_address));

    give_all_tons();
    return ();
  }

  if (operation_code == operation::set_jetton_wallet_address) {
    throw_unless(error::not_an_admin, equal_slices(this::admin_address, sender_address));

    slice new_address = in_msg_body~load_msg_addr();
    this::jetton_wallet_address = new_address;

    set_global_state();
    return ();
  }

}

(slice) get_jetton_wallet_address() method_id {
  load_global_state();
  return (this::jetton_wallet_address);
}
