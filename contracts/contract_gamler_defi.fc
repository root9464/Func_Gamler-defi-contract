#include "imports/stdlib.fc";
#include "includes/constants.fc";
#include "includes/opcodes.fc";
#include "helpers/helpers.fc";

global slice this::jetton_wallet_address;
global int msg::query_id;


() set_storage(slice admin_address, slice jetton_wallet_address) impure {
  set_data(
    begin_cell()
        .store_slice(admin_address)
        .store_slice(jetton_wallet_address)
    .end_cell()
  );
}

(slice, slice) load_storage() impure {
  slice contract_storage = get_data().begin_parse();
  return (
    contract_storage~load_msg_addr(),
    contract_storage~load_msg_addr()
  );
}

() load_global_state() impure {
  slice contract_storage = get_data().begin_parse();
  this::jetton_wallet_address = contract_storage~load_msg_addr();
}

() set_global_state() impure {
  set_data(
    begin_cell()
        .store_slice(this::jetton_wallet_address)
    .end_cell()
  );
}

() send_simple_jettons(slice to_address, int jetton_amount) impure inline {
  builder message = begin_cell()
    .store_uint(BOUNCEABLE, MSG_TYPE_SIZE)
    .store_coins(this::jetton_wallet_address)
    .store_coins(MAX_COMISSION * 2)
    .store_uint(0, MSG_ONLY_BODY_SIZE)
    .store_uint(operation::jetton::transfer, OPERATION_CODE_SIZE)
    .store_uint(msg::query_id, QUERY_ID_SIZE)
    .store_coins(jettons_amount)
    .store_slice(to_address)
    .store_slice(helper::addr_none())  ;; response_address
    .store_int(0, 1)  ;; empty custom_payload
    .store_coins(0)   ;; forward amount to new_owner_address
    .store_int(0, 1) ;; empty forward_payload
  .end_cell();

  send_raw_message(message, SEND_MODE_PAY_FEES_SEPARATELY);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  slice sliced_message = in_msg_full.begin_parse();

  int flags = sliced_message~load_uint(4);

  if (flags & 1) {
    return ();
  }

  slice sender_address = sliced_message~load_msg_addr();

  int operation_code = in_msg_body~load_uint(32);
  msg::query_id = in_msg_body~load_uint(64);

}
